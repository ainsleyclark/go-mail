// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	http "net/http"

	httputil "github.com/ainsleyclark/go-mail/internal/httputil"
	mock "github.com/stretchr/testify/mock"
)

// Responder is an autogenerated mock type for the Responder type
type Responder struct {
	mock.Mock
}

// Error provides a mock function with given fields:
func (_m *Responder) Error() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HasError provides a mock function with given fields: response
func (_m *Responder) HasError(response *http.Response) bool {
	ret := _m.Called(response)

	var r0 bool
	if rf, ok := ret.Get(0).(func(*http.Response) bool); ok {
		r0 = rf(response)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Meta provides a mock function with given fields:
func (_m *Responder) Meta() httputil.Meta {
	ret := _m.Called()

	var r0 httputil.Meta
	if rf, ok := ret.Get(0).(func() httputil.Meta); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(httputil.Meta)
	}

	return r0
}

// Unmarshal provides a mock function with given fields: buf
func (_m *Responder) Unmarshal(buf []byte) error {
	ret := _m.Called(buf)

	var r0 error
	if rf, ok := ret.Get(0).(func([]byte) error); ok {
		r0 = rf(buf)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
